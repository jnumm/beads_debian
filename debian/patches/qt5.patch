Author: Andreas Tille <tille@debian.org>
Last-Update: Thu, 19 Oct 2017 14:58:04 +0200
Description: Port from Qt4 to Qt5

--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -1,12 +1,13 @@
 
- # this command finds Qt4 libraries and sets all required variables
-  # note that it's Qt4, not QT4 or qt4
-FIND_PACKAGE( Qt4 REQUIRED )
+ # this command finds Qt5 libraries and sets all required variables
+  # note that it's Qt5, not QT5 or qt5
+FIND_PACKAGE( Qt5 REQUIRED COMPONENTS Core LinguistTools Widgets)
 
   
   # add some useful macros and variables
   # (QT_USE_FILE is a variable defined by FIND_PACKAGE( Qt4 ) that contains a path to CMake script)
-INCLUDE( ${QT_USE_FILE} )
+# see https://stackoverflow.com/questions/28252909/cmake-and-qt5-include-only-takes-one-argument
+# INCLUDE( ${QT_USE_FILE} )
 
 SET( BEADS_CPP
 	beads.cpp
@@ -65,4 +66,4 @@ ELSE(WIN32)
 	target_link_libraries (beads ${X11_LIBRARIES} m ${PTHREADS_LIBRARY} ${EXTRA_CIMG_LIBRARY} ${QT_LIBRARIES} )
 ENDIF(WIN32)
 
-SUBDIRS (qtbeads)
\ No newline at end of file
+SUBDIRS (qtbeads)
--- a/src/qtbeads/CMakeLists.txt
+++ b/src/qtbeads/CMakeLists.txt
@@ -1,12 +1,12 @@
 
- # this command finds Qt4 libraries and sets all required variables
-  # note that it's Qt4, not QT4 or qt4
-FIND_PACKAGE( Qt4 REQUIRED )
+ # this command finds Qt5 libraries and sets all required variables
+  # note that it's Qt5, not QT5 or qt5
+FIND_PACKAGE( Qt5 REQUIRED COMPONENTS Core LinguistTools Widgets)
 
   
   # add some useful macros and variables
   # (QT_USE_FILE is a variable defined by FIND_PACKAGE( Qt4 ) that contains a path to CMake script)
-INCLUDE( ${QT_USE_FILE} )
+# INCLUDE( ${QT_USE_FILE} )
 
 SET( BEADS_FOR_QT_CPP
 	../ConfigFile/ConfigFile
@@ -80,7 +80,7 @@ ADD_DEFINITIONS( -Wall )
 # Translation files
 SET(GLOB TRANS translations/*.ts)
 # add translations ...
-QT4_ADD_TRANSLATION(QM ${TRANS})
+QT5_ADD_TRANSLATION(QM ${TRANS})
 
 
 
@@ -94,13 +94,13 @@ QT4_ADD_TRANSLATION(QM ${TRANS})
   
   # this command will generate rules that will run rcc on all files from SAMPLE_RCS
   # in result SAMPLE_RC_SRCS variable will contain paths to files produced by rcc
-QT4_ADD_RESOURCES( QTBEADS_SRCS ${SAMPLE_RCS} )
+QT5_ADD_RESOURCES( QTBEADS_SRCS ${SAMPLE_RCS} )
   
   # this will run uic on .ui files:
-  #QT4_WRAP_UI( SAMPLE_UI_HDRS ${SAMPLE_UIS} )
+  #QT5_WRAP_UI( SAMPLE_UI_HDRS ${SAMPLE_UIS} )
   
   # and finally this will run moc:
-QT4_WRAP_CPP( QTBEADS_MOC_SRCS ${QTBEADS_MOC_HDRS} )
+QT5_WRAP_CPP( QTBEADS_MOC_SRCS ${QTBEADS_MOC_HDRS} )
   
   # we need this to be able to include headers produced by uic in our code
   # (CMAKE_BINARY_DIR holds a path to the build directory, while INCLUDE_DIRECTORIES() works just like INCLUDEPATH from qmake)
